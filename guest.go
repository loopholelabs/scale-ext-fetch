// Code generated by scale-signature-go v0.1.0, DO NOT EDIT.
// schema: HttpFetch:alpha
// output: extfetch

package extfetch

import (
	"github.com/loopholelabs/polyglot"
	"unsafe"
)

var (
	writeBuffer = polyglot.NewBuffer()
	readBuffer  []byte
)

// Write serializes the signature into the global writeBuffer and returns the pointer to the buffer and its size
//
// Users should not use this method.
func Write(ctx *HttpConfig) (uint32, uint32) {
	writeBuffer.Reset()
	ctx.Encode(writeBuffer)
	underlying := writeBuffer.Bytes()
	ptr := &underlying[0]
	unsafePtr := uintptr(unsafe.Pointer(ptr))
	return uint32(unsafePtr), uint32(writeBuffer.Len())
}

// Read deserializes signature from the global readBuffer
//
// Users should not use this method.
func Read(ctx *HttpConnector) (*HttpConnector, error) {
	return DecodeHttpConnector(ctx, readBuffer)
}

// Error serializes an error into the global writeBuffer and returns a pointer to the buffer and its size
//
// Users should not use this method.
func Error(err error) (uint32, uint32) {
	writeBuffer.Reset()
	polyglot.Encoder(writeBuffer).Error(err)
	underlying := writeBuffer.Bytes()
	ptr := &underlying[0]
	unsafePtr := uintptr(unsafe.Pointer(ptr))
	return uint32(unsafePtr), uint32(writeBuffer.Len())
}

// Create a new instance of the extension.
func New(params *HttpConfig) (*HttpConnector, error) {
	ext_new_HttpFetch(Write(params))
	ctx := &HttpConnector{}
	return Read(ctx)
}

//export ext_new_HttpFetch
//go:linkname ext_new_HttpFetch
func ext_new_HttpFetch(offset uint32, length uint32)

// Create the functions that are defined in the schema.

func (e *HttpConnector) Fetch(params *ConnectionDetails) (*HttpResponse, error) {
	writeBuffer.Reset()
	params.Encode(writeBuffer)
	underlying := writeBuffer.Bytes()
	ptr := &underlying[0]
	unsafePtr := uintptr(unsafe.Pointer(ptr))
	off := uint32(unsafePtr)
	l := uint32(writeBuffer.Len())

	ext_func_HttpFetch_Fetch(e.InstanceId, off, l)
	ctx := &HttpResponse{}
	return DecodeHttpResponse(ctx, readBuffer)
}

//export ext_func_HttpFetch_Fetch
//go:linkname ext_func_HttpFetch_Fetch
func ext_func_HttpFetch_Fetch(instance uint32, offset uint32, length uint32)
